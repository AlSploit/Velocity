local MatchingKey = loadstring(game:HttpGet("https://raw.githubusercontent.com/AlSploit/Velocity/main/SecurityCheck"))()
local SecretKey = "5OKzZB1QFOthIQz26K9AL6woKN5CpWAIPZHKBptEeXpfhHCoi1JiCAAqSIDFj8bB8a48uB9WjuM5E8mbpsaGCM2GB705stgEE5z6"

local LocalPlayer = game.Players.LocalPlayer

shared.VelocityLoaded = true
MatchingKey = true

repeat task.wait() until shared.VelocityLoaded == true and MatchingKey == true

local UserInputService = game:GetService("UserInputService")
local LightingService = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

local Velocity = Instance.new("ScreenGui")
local ContainerFrame = Instance.new("Frame")
local Blur = Instance.new("BlurEffect")

local DefaultLayoutOrder = 0

Velocity.Name = "Velocity"
Velocity.Parent = game.Players.LocalPlayer.PlayerGui
Velocity.ResetOnSpawn = false

ContainerFrame.Name = "ContainerFrame"
ContainerFrame.Parent = Velocity
ContainerFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ContainerFrame.BackgroundTransparency = 1.000
ContainerFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ContainerFrame.BorderSizePixel = 0
ContainerFrame.Position = UDim2.new(0, 0, 0.0413907282, 0)
ContainerFrame.Size = UDim2.new(1, 0, 0.959999979, 0)
ContainerFrame.Visible = false

Blur.Parent = LightingService
Blur.Enabled = false
Blur.Size = 16

task.spawn(function()
	UserInputService.InputBegan:Connect(function(Input)
		if Input.KeyCode == Enum.KeyCode.M then
			ContainerFrame.Visible = not ContainerFrame.Visible
			Blur.Enabled = not Blur.Enabled
		end
	end)
end)

function CreateTab(Name)
	local Tab = Instance.new("Frame")
	local TabCorner = Instance.new("UICorner")
	local TabInfo = Instance.new("Frame")
	local TabIcon = Instance.new("ImageLabel")
	local TabName = Instance.new("TextLabel")
	local UIPadding = Instance.new("UIPadding")
	local TabInfoCorner = Instance.new("UICorner")
	local CornerDetail = Instance.new("Frame")
	local TogglesContainer = Instance.new("Frame")
	local ModulesLayout = Instance.new("UIListLayout")
	local UIPadding_4 = Instance.new("UIPadding")
	local UIListLayout_2 = Instance.new("UIListLayout")

	Tab.Name = "Tab"
	Tab.Parent = ContainerFrame
	Tab.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
	Tab.BackgroundTransparency = 1.000
	Tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Tab.BorderSizePixel = 0
	Tab.Position = UDim2.new(0, 54, 0, 0)
	Tab.Size = UDim2.new(0, 210, 0, 577)

	TabCorner.CornerRadius = UDim.new(0, 10)
	TabCorner.Name = "TabCorner"
	TabCorner.Parent = Tab

	TabInfo.Name = "TabInfo"
	TabInfo.Parent = Tab
	TabInfo.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	TabInfo.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabInfo.BorderSizePixel = 0
	TabInfo.Size = UDim2.new(0, 210, 0, 39)

	TabIcon.Name = "TabIcon"
	TabIcon.Parent = TabInfo
	TabIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabIcon.BackgroundTransparency = 1.000
	TabIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabIcon.BorderSizePixel = 0
	TabIcon.Position = UDim2.new(0, 13, 0, 13)
	TabIcon.Size = UDim2.new(0, 15, 0, 15)
	TabIcon.Image = "rbxassetid://14483662459"

	TabName.Name = "TabName"
	TabName.Parent = TabInfo
	TabName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabName.BackgroundTransparency = 1.000
	TabName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabName.BorderSizePixel = 0
	TabName.Size = UDim2.new(1, 0, 1, 0)
	TabName.Font = Enum.Font.GothamBold
	TabName.Text = Name
	TabName.TextColor3 = Color3.fromRGB(255, 255, 255)
	TabName.TextSize = 16.000
	TabName.TextWrapped = true
	TabName.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding.Parent = TabName
	UIPadding.PaddingLeft = UDim.new(0, 38)

	TabInfoCorner.CornerRadius = UDim.new(0, 10)
	TabInfoCorner.Name = "TabInfoCorner"
	TabInfoCorner.Parent = TabInfo

	CornerDetail.Name = "CornerDetail"
	CornerDetail.Parent = TabInfo
	CornerDetail.AnchorPoint = Vector2.new(0, 1)
	CornerDetail.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	CornerDetail.BorderColor3 = Color3.fromRGB(0, 0, 0)
	CornerDetail.BorderSizePixel = 0
	CornerDetail.Position = UDim2.new(0, 0, 1, 0)
	CornerDetail.Size = UDim2.new(1, 0, 0, 7)

	TogglesContainer.Name = "TogglesContainer"
	TogglesContainer.Parent = Tab
	TogglesContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TogglesContainer.BackgroundTransparency = 1.000
	TogglesContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TogglesContainer.BorderSizePixel = 0
	TogglesContainer.Position = UDim2.new(0, 0, 0, 39)
	TogglesContainer.Size = UDim2.new(0, 210, 0, 537)

	ModulesLayout.Name = "ModulesLayout"
	ModulesLayout.Parent = TogglesContainer
	ModulesLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	ModulesLayout.SortOrder = Enum.SortOrder.LayoutOrder

	UIPadding_4.Parent = TogglesContainer

	UIListLayout_2.Parent = ContainerFrame
	UIListLayout_2.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_2.Padding = UDim.new(0, 35)

	return TogglesContainer
end

function CreateToggle(Name, Parent, DefaultValue, CallBack)
	local Toggle = Instance.new("Frame")
	local Toggle_2 = Instance.new("TextButton")
	local UIPadding_2 = Instance.new("UIPadding")
	local DropDownButton = Instance.new("ImageButton")

	local Checker = {["Enabled"] = false}

	function Checker:Toggle(Bool)
		Bool = Bool or (not Checker["Enabled"])
		Checker["Enabled"] = Bool

		if not Bool then
			task.spawn(function()
				CallBack(false)
				Toggle_2.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
			end)
		else
			task.spawn(function()
				CallBack(true)
				Toggle_2.BackgroundColor3 = Color3.new(0.635294, 0.313725, 1)
			end)
		end
	end

	if DefaultValue == true then
		Checker:Toggle()
	end

	task.spawn(function()
		Toggle_2.Activated:Connect(function()
			Checker:Toggle()	
		end)
	end)	

	Toggle.Name = "Toggle"
	Toggle.Parent = Parent
	Toggle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Toggle.BackgroundTransparency = 1.000
	Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Toggle.BorderSizePixel = 0
	Toggle.Size = UDim2.new(0, 210, 0, 40)

	Toggle.LayoutOrder = DefaultLayoutOrder + 10
	DefaultLayoutOrder = Toggle.LayoutOrder

	Toggle_2.Name = "Toggle"
	Toggle_2.Parent = Toggle
	Toggle_2.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	Toggle_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Toggle_2.BorderSizePixel = 0
	Toggle_2.Size = UDim2.new(1, 0, 0, 40)
	Toggle_2.AutoButtonColor = false
	Toggle_2.Font = Enum.Font.Gotham
	Toggle_2.Text = Name
	Toggle_2.TextColor3 = Color3.fromRGB(255, 255, 255)
	Toggle_2.TextSize = 14.000
	Toggle_2.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding_2.Parent = Toggle_2
	UIPadding_2.PaddingLeft = UDim.new(0, 13)
	UIPadding_2.PaddingTop = UDim.new(0, 1)

	DropDownButton.Name = "DropDownButton"
	DropDownButton.Parent = Toggle_2
	DropDownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	DropDownButton.BackgroundTransparency = 1.000
	DropDownButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	DropDownButton.BorderSizePixel = 0
	DropDownButton.Position = UDim2.new(0, 165, 0, 12)
	DropDownButton.Rotation = 0
	DropDownButton.Size = UDim2.new(0, 13, 0, 13)
	DropDownButton.Image = "http://www.roblox.com/asset/?id=6026663699"
	DropDownButton.ScaleType = Enum.ScaleType.Fit

	task.spawn(function()
		DropDownButton.Activated:Connect(function()
			if DropDownButton.Rotation == 0 then
				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local RotationTween = TweenService:Create(DropDownButton, TweenInformation, {Rotation = 90})

				RotationTween:Play()
			end

			if DropDownButton.Rotation ~= 0 then
				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local RotationTween = TweenService:Create(DropDownButton, TweenInformation, {Rotation = 0})

				RotationTween:Play()
			end
		end)
	end)

	return Toggle, DropDownButton, DefaultLayoutOrder
end

function CreateMiniToggle(Name, Parent, DefaultValue, LayoutOrder, CallBack)
	local MiniToggle = Instance.new("Frame")
	local ToggleFrame = Instance.new("Frame")
	local ToggleFrameCorner = Instance.new("UICorner")
	local ToggleButton = Instance.new("TextButton")
	local ToggleButtonC = Instance.new("UICorner")
	local ToggleName = Instance.new("TextLabel")
	local UIPadding_3 = Instance.new("UIPadding")

	local Checker = {["Enabled"] = false}

	function Checker:Toggle(Bool)
		Bool = Bool or (not Checker["Enabled"])
		Checker["Enabled"] = Bool

		if not Bool then
			task.spawn(function()
				CallBack(false)
				ToggleFrame.BackgroundColor3 = Color3.fromRGB(17, 17, 17)

				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(ToggleButton, TweenInformation, {Position = UDim2.new(0, 2, 0.5, 0)})

				PositionTween:Play()				
			end)
		else
			task.spawn(function()
				CallBack(true)
				ToggleFrame.BackgroundColor3 = Color3.new(0.635294, 0.313725, 1)

				local TweenInformation = TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(ToggleButton, TweenInformation, {Position = UDim2.new(0, 14, 0.5, 0)})

				PositionTween:Play()		
			end)
		end
	end

	if DefaultValue == true then
		Checker:Toggle()
	end

	task.spawn(function()
		ToggleButton.Activated:Connect(function()
			Checker:Toggle()	
		end)
	end)	

	MiniToggle.Name = "MiniToggle"
	MiniToggle.Parent = Parent
	MiniToggle.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	MiniToggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	MiniToggle.BorderSizePixel = 0
	MiniToggle.Size = UDim2.new(0, 210, 0, 30)	
	MiniToggle.LayoutOrder = LayoutOrder

	ToggleFrame.Name = "ToggleFrame"
	ToggleFrame.Parent = MiniToggle
	ToggleFrame.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	ToggleFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleFrame.BorderSizePixel = 0
	ToggleFrame.Position = UDim2.new(0.809523761, 0, 0.166666672, 0)
	ToggleFrame.Size = UDim2.new(0.142857134, 0, 0.666666687, 0)

	ToggleFrameCorner.CornerRadius = UDim.new(0, 10)
	ToggleFrameCorner.Name = "ToggleFrameCorner"
	ToggleFrameCorner.Parent = ToggleFrame

	ToggleButton.Name = "ToggleButton"
	ToggleButton.Parent = ToggleFrame
	ToggleButton.AnchorPoint = Vector2.new(0, 0.5)
	ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ToggleButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleButton.BorderSizePixel = 0
	ToggleButton.Position = UDim2.new(0, 14, 0.5, 0)
	ToggleButton.Size = UDim2.new(0, 14, 0, 14)
	ToggleButton.AutoButtonColor = false
	ToggleButton.Font = Enum.Font.SourceSans
	ToggleButton.Text = ""
	ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
	ToggleButton.TextSize = 14.000

	ToggleButtonC.CornerRadius = UDim.new(1, 0)
	ToggleButtonC.Name = "ToggleButtonC"
	ToggleButtonC.Parent = ToggleButton

	ToggleName.Name = "ToggleName"
	ToggleName.Parent = MiniToggle
	ToggleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ToggleName.BackgroundTransparency = 1.000
	ToggleName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ToggleName.BorderSizePixel = 0
	ToggleName.Size = UDim2.new(1, 0, 1, 0)
	ToggleName.Font = Enum.Font.Gotham
	ToggleName.Text = Name
	ToggleName.TextColor3 = Color3.fromRGB(255, 255, 255)
	ToggleName.TextSize = 14.000
	ToggleName.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding_3.Parent = ToggleName
	UIPadding_3.PaddingLeft = UDim.new(0, 10)

	return MiniToggle
end

function CreateSlider(Name, Parent, DefaultValue, MaximumValue, LayoutOrder, CallBack)
	local Slider = Instance.new("Frame")
	local SliderName = Instance.new("TextLabel")
	local SliderNamePadding = Instance.new("UIPadding")
	local SliderMain = Instance.new("Frame")
	local Fill = Instance.new("Frame")
	local FillCircle = Instance.new("TextButton")
	local FillCircleCorner = Instance.new("UICorner")
	local SliderValue = Instance.new("TextLabel")
	local SliderValuePadding = Instance.new("UIPadding")

	Slider.Name = "Slider"
	Slider.Parent = Parent
	Slider.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
	Slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Slider.BorderSizePixel = 0
	Slider.LayoutOrder = 10
	Slider.Size = UDim2.new(0, 210, 0, 40)

	SliderName.Name = "SliderName"
	SliderName.Parent = Slider
	SliderName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SliderName.BackgroundTransparency = 1.000
	SliderName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderName.BorderSizePixel = 0
	SliderName.Size = UDim2.new(1, 0, 1, 0)
	SliderName.Font = Enum.Font.Gotham
	SliderName.Text = Name
	SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderName.TextSize = 14.000
	SliderName.TextXAlignment = Enum.TextXAlignment.Left

	SliderNamePadding.Name = "SliderNamePadding"
	SliderNamePadding.Parent = SliderName
	SliderNamePadding.PaddingBottom = UDim.new(0, 12)
	SliderNamePadding.PaddingLeft = UDim.new(0, 10)

	SliderMain.Name = "SliderMain"
	SliderMain.Parent = Slider
	SliderMain.AnchorPoint = Vector2.new(0.5, 0)
	SliderMain.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
	SliderMain.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderMain.BorderSizePixel = 0
	SliderMain.Position = UDim2.new(0.5, 0, 0, 28)
	SliderMain.Size = UDim2.new(1, -20, 0, 2)

	Fill.Name = "Fill"
	Fill.Parent = SliderMain
	Fill.BackgroundColor3 = Color3.fromRGB(170, 0, 255)
	Fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Fill.BorderSizePixel = 0
	Fill.Size = UDim2.new(0, 35, 1, 0)

	FillCircle.Name = "FillCircle"
	FillCircle.Parent = SliderMain
	FillCircle.AnchorPoint = Vector2.new(0, 0.5)
	FillCircle.BackgroundColor3 = Color3.fromRGB(161, 79, 255)
	FillCircle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	FillCircle.BorderSizePixel = 0
	FillCircle.Position = UDim2.new(1, -5, 0.5, 0)
	FillCircle.Size = UDim2.new(0, 10, 0, 10)
	FillCircle.AutoButtonColor = false
	FillCircle.Font = Enum.Font.SourceSans
	FillCircle.Text = ""
	FillCircle.TextColor3 = Color3.fromRGB(0, 0, 0)
	FillCircle.TextSize = 14.000

	FillCircleCorner.CornerRadius = UDim.new(1, 0)
	FillCircleCorner.Name = "FillCircleCorner"
	FillCircleCorner.Parent = FillCircle

	SliderValue.Name = "SliderValue"
	SliderValue.Parent = Slider
	SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SliderValue.BackgroundTransparency = 1.000
	SliderValue.BorderColor3 = Color3.fromRGB(0, 0, 0)
	SliderValue.BorderSizePixel = 0
	SliderValue.Size = UDim2.new(1, 0, 1, 0)
	SliderValue.Font = Enum.Font.Gotham
	SliderValue.Text = DefaultValue
	SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
	SliderValue.TextSize = 14.000
	SliderValue.TextXAlignment = Enum.TextXAlignment.Right

	SliderValuePadding.Name = "SliderValuePadding"
	SliderValuePadding.Parent = SliderValue
	SliderValuePadding.PaddingBottom = UDim.new(0, 12)
	SliderValuePadding.PaddingRight = UDim.new(0, 10)

	local Debounce = true

	local function Snap(Number, Factor)
		if Factor == 0 then
			return Number
		else
			return math.floor(Number / Factor + 0.5) * Factor

		end
	end

	task.spawn(function()
		FillCircle.MouseButton1Down:Connect(function()
			Debounce = false
		end)

		UserInputService.InputEnded:connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Debounce = true
			end
		end)
	end)

	task.spawn(function()
		local BarPosition = FillCircle.Position

		local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
		local PositionTween = TweenService:Create(FillCircle, TweenInformation, {Position = UDim2.new(DefaultValue / MaximumValue - 0.05, 0, BarPosition.Y.Scale, BarPosition.Y.Offset)})

		PositionTween:Play()

		local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
		local SizeTween = TweenService:Create(Fill, TweenInformation, {Size = UDim2.new(DefaultValue / MaximumValue, 0, 1, 0)})

		SizeTween:Play()
	end)

	task.spawn(function()
		repeat
			task.wait()

			if Debounce == false then
				local MousePosition = UserInputService:GetMouseLocation().X
				local BarPosition = FillCircle.Position
				local FrameSize = Slider.AbsoluteSize.X
				local FramePosition = Slider.AbsolutePosition.X

				local Position = Snap((MousePosition - FramePosition) / FrameSize, 0.01)

				local Percentage = math.clamp(Position, 0, 0.95)

				local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local PositionTween = TweenService:Create(FillCircle, TweenInformation, {Position = UDim2.new(Percentage, 0, BarPosition.Y.Scale, BarPosition.Y.Offset)})

				PositionTween:Play()

				local TweenInformation = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
				local SizeTween = TweenService:Create(Fill, TweenInformation, {Size = UDim2.new(Percentage, 0, 1, 0)})

				SizeTween:Play()

				SliderValue.Text = math.round(Percentage * MaximumValue + 1)

				CallBack(math.round(Percentage * MaximumValue + 1))
			end
		until not Slider
	end)

	return Slider
end

local Settings = {
	NoKnockBack = {Value = true},
	KillAura = {Value = true, CustomAnimation = true, Range = 18},
	Velocity = {Value = true}
}

local ComabatTab = CreateTab("Combat")
local BlatantTab = CreateTab("Blatant")
local UtilityTab = CreateTab("Utility")
local WorldTab = CreateTab("World")

task.spawn(function()
	local KillAura, DropDownButton, LayoutOrder = CreateToggle("KillAura", ComabatTab, Settings.KillAura, function(CallBack)
		Settings.KillAura.Value = CallBack
	end)

	local CustomAnimationsValue = true
	local CustomAnimations

	local RangeValue = true
	local Range

	DropDownButton.Activated:Connect(function()
		if CustomAnimationsValue == true then
			CustomAnimations = CreateMiniToggle("CustomAnimations", ComabatTab, Settings.KillAura.CustomAnimation, LayoutOrder + 1, function(Callback)
				Settings.KillAura.CustomAnimation = Callback
			end)
		end

		if RangeValue == true then
			Range = CreateSlider("Range", ComabatTab, 18, 18, LayoutOrder + 2, function(Callback)
				Settings.KillAura.Range = Callback
			end)
		end

		if CustomAnimationsValue == false then
			CustomAnimations:Destroy()
		end

		if RangeValue == false then
			Range:Destroy()
		end

		CustomAnimationsValue = not CustomAnimationsValue
		RangeValue = not RangeValue
	end)
end)

task.spawn(function()
	local Velocity, DropDownButton, LayoutOrder = CreateToggle("Velocity", ComabatTab, Settings.Velocity.Value, function(CallBack)
		print(CallBack)
	end)
end)
